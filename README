Kafka Proxy provides a way for the Kafka consumers belonged to the
same consumer group to be able to scale beyond the total numbers of
partitions for a single topic.  By design, the total numbers of the
Kafka consumers belonged to the same consumer group cannot be larger
than the total numbers of partitions for a single topic.  Kafka Proxy
solves this issue by acting as a single consumer to consume the Kafka
messages from a single topic on the consumers' behalf, and providing a
set of RESTful APIs to the consumers to consume the messages from the
proxy.  To eliminate the chances of processing the same messages, the
consumers need to explicitly send acks to the proxy to indicate that
they have finished processing those messages via the RESTful APIs.
The order of the messages is not guaranteed even from the same
partition.

To compile:

    $ configure
    $ make

To run:

    $ cd src
    $ ./kafka_proxy -b localhost:9092 -p 8888 -P /tmp/kafka_proxy

      -b tells kafka_proxy the location of the kafka brokers.
      -p tells kafka_proxy the port number to listen to.
      -P tells kafka_proxy the path to the DB files.

Currently, kafka_proxy supports the following RESTful APIs:

1. GET /_consume?gid=<id>&topic=<topic>&size=<n>&timeout=<secs>

   For example:
   $ curl -s -XGET 'http://localhost:8888/_consume?gid=bar&topic=foo&size=3&timeout=60'

   Note: Only gid and topic are mandatory.  Size and timeout are
   optional with the default value of 1 and 60 respectively.

2. DELETE /_delete?gid=<id>&topic=<topic>&partition=<partition>&offset=<offset>
 
   For example: 
   $ curl -s -XDELETE 'http://localhost:8888/_delete?gid=bar&topic=foo&partition=0&offset=2'
 
3. POST /_delete?gid=bar&topic=foo
   part1 offset1
   part2 offset2
   ..

   For example:
   $ curl -s -XPOST 'http://localhost:8888/_delete?gid=bar&topic=foo' -d '
   0 2
   1 4
   '
 
   In the case of POST with _delete endpoint, the data contains rows
   of values.  Each row represents the partition and offset in the
   respective order.  This API was designed to acknowledge multiple
   partition-offset pairs in high throughput.  In the example above,
   two partition-offset pairs will be acknowledged.
